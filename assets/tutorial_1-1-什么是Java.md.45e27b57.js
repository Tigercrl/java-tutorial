import{_ as a,o as l,c as i,Q as v}from"./chunks/framework.50dad69f.js";const h=JSON.parse('{"title":"1.1 什么是Java","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/1-1-什么是Java.md","filePath":"tutorial/1-1-什么是Java.md","lastUpdated":null}'),J={name:"tutorial/1-1-什么是Java.md"},t=v('<h1 id="_1-1-什么是java" tabindex="-1">1.1 什么是Java <a class="header-anchor" href="#_1-1-什么是java" aria-label="Permalink to &quot;1.1 什么是Java&quot;">​</a></h1><p>Hi~ 欢迎你来到Java的世界！</p><p>让我们一步一步开始学习Java吧！</p><h2 id="java的由来" tabindex="-1">Java的由来 <a class="header-anchor" href="#java的由来" aria-label="Permalink to &quot;Java的由来&quot;">​</a></h2><p>Java最初是由任职于太阳微系统的詹姆斯·高斯林（James-Gosling）等人因C语言难用的API于1990年代初开发了Java。</p><p>Java一开始名为Oak，但该商标被其他公司注册了，故改名为Java。</p><h2 id="java体系" tabindex="-1">Java体系 <a class="header-anchor" href="#java体系" aria-label="Permalink to &quot;Java体系&quot;">​</a></h2><p>Java分为3个种类——JavaSE、JavaEE和JavaME</p><ul><li><strong>JavaSE</strong><ul><li>全称：Java Platform Standard Edition</li><li>中文：Java平台标准版</li><li>最常见的Java版本，能安装于Windows、MacOS、Linux等常见电脑系统</li></ul></li><li><strong>JavaEE</strong><ul><li>全称：Java Platform,Enterprise Edition</li><li>中文：Java平台企业版</li><li>JavaEE包含JavaSE，比JavaSE提供更全面的功能。一些网站（如：淘宝）就是用JavaEE做的。</li></ul></li><li><strong>JavaME</strong><ul><li>全称：Java Platform Micro Edition</li><li>中文：Java平台微型版</li><li>树莓派等手机使用的Java版本，但随着苹果、安卓的兴起，逐渐被淘汰。</li></ul></li></ul><h2 id="java的分类" tabindex="-1">Java的分类 <a class="header-anchor" href="#java的分类" aria-label="Permalink to &quot;Java的分类&quot;">​</a></h2><ul><li>JVM <ul><li>全称Java Virtual Machine，也就是Java虚拟机。所有Java程序都在Java虚拟机中运行，这也就是Java能跨平台运行的原因，也是Java启动慢的原因。注意，Java虚拟机不想其它虚拟机一样内存和CPU功耗那么大，简单的程序一般也就50MB左右的内存占用。JVM还需要JRE的支持才能运行Java程序。</li></ul></li><li>JRE <ul><li>全称Java Runtime Environment，也就是Java运行时环境，包含了JVM的所有功能。JRE可以运行 <strong>.class</strong> 文件，但不能编译 <strong>.java</strong> 文件。一般用于只运行不编译Java软件的用户电脑上。</li></ul></li><li>JDK <ul><li>全称Java Developement Kit，也就是Java开发资源包，包含了JRE的所有功能。支持编译程序，运行程序等功能。编写Java程序就用的是JDK。</li></ul></li></ul><h2 id="java的特性" tabindex="-1">Java的特性 <a class="header-anchor" href="#java的特性" aria-label="Permalink to &quot;Java的特性&quot;">​</a></h2><p>注：以下看不懂没事，以后在学习的过程中会慢慢了解</p><ul><li><strong>Java 语言是简单的</strong><ul><li>Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。 特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。</li></ul></li><li><strong>Java 语言是面向对象的</strong><ul><li>Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制。 Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。</li></ul></li><li><strong>Java语言是分布式的</strong><ul><li>Java 语言支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等。Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段。</li></ul></li><li><strong>Java 语言是健壮的</strong><ul><li>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。对指针的丢弃是 Java 的<strong>明智</strong>选择。 Java 的安全检查机制使得 Java 更具健壮性。</li></ul></li><li><strong>Java语言是安全的</strong><ul><li>Java通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击。除了Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制，如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制，让 Java 应用设置安全哨兵。</li></ul></li><li><strong>Java 语言是体系结构中立的</strong><ul><li>Java 程序在 Java 平台上被编译为体系结构中立的字节码格式，然后可以在实现这个 Java 平台的任何系统中运行。 这种途径适合于异构的网络环境和软件的分发。</li></ul></li><li><strong>Java 语言是可移植的</strong><ul><li>这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度。 Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。</li></ul></li><li><strong>Java 语言是解释型的</strong><ul><li>如前所述，Java 程序在 Java 平台上被编译为字节码格式，然后可以在实现这个 Java 平台的任何系统中运行。 在运行时，Java 平台中的 Java 解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</li></ul></li><li><strong>Java 是高性能的</strong><ul><li>与那些解释型的高级脚本语言相比，Java 的确是高性能的。事实上，Java 的运行速度随着 Just-In-Time 编译器技术的发展越来越接近于 C++。</li></ul></li><li><strong>Java 语言是多线程的</strong><ul><li>在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。 通常有两种方法来创建线程： 其一，使用型构为 Thread(Runnable) 的构造子类将一个实现了 Runnable 接口的对象包装成一个线程。 其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口， 因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。 Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制。</li></ul></li><li><strong>Java 语言是动态的</strong><ul><li>Java 语言的设计目标之一是适应于动态变化的环境。Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。 另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</li></ul></li></ul>',14),r=[t];function n(o,e,s,u,d,c){return l(),i("div",null,r)}const _=a(J,[["render",n]]);export{h as __pageData,_ as default};
